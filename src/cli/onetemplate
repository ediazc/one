#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2011, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"]

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby"
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby"
end

$: << RUBY_LIB_LOCATION


require 'OpenNebula'
require 'CommandManager'
require 'client_utilities'
require 'command_parse'

ShowTableTemplate={
    :id => {
        :name => "ID",
        :desc => "ONE identifier for the Template",
        :size => 4,
        :proc => lambda {|d,e| d.id }
    },
    :user=> {
        :name => "USER",
        :desc => "Name of the owner",
        :size => 8,
        :proc => lambda {|d,e|
            "TODO"
        }
    },
    :uid=> {
        :name => "UID",
        :desc => "Id of the owner",
        :size => 4,
        :proc => lambda {|d,e|
            d["UID"]
        }
    },
    :gid=> {
        :name => "GID",
        :desc => "Id of the group",
        :size => 4,
        :proc => lambda {|d,e|
            d.gid
        }
    },
    :name => {
        :name => "NAME",
        :desc => "Name of the Template",
        :size => 20,
        :proc => lambda {|d,e|
            d.name
        }
    },
    :regtime => {
        :name => "REGTIME",
        :desc => "Registration time of the Template",
        :size => 20,
        :proc => lambda {|d,e|
            str_register_time(d)
        }
    },
    :public => {
        :name => "PUBLIC",
        :desc => "Whether the Template is public or not",
        :size => 3,
        :proc => lambda {|d,e|
            if d["PUBLIC"].to_i == 1 then "Yes" else "No" end}
    },

    :default => [:id, :user, :name, :regtime, :public]
}



class TemplateShow

    def initialize(client, filter_flag="-2")
        @templatepool=OpenNebula::TemplatePool.new(client, filter_flag.to_i)
        @table=ShowTable.new(ShowTableTemplate)
    end

    def header_template_small
        scr_bold
        scr_underline
        print @table.header_str
        scr_restore
        puts ""
    end

    def top(options=nil)
        delay=1
        delay=options[:delay] if options && options[:delay]

        result=nil

        begin
            while true
                scr_cls
                scr_move(0,0)
                result=list_short(options)
                sleep delay
            end
        rescue Exception
        end
        result
    end

    def list_short(options=nil)
        res=@templatepool.info()

        if options
            @table.columns=options[:columns] if options[:columns]
        end

        if OpenNebula.is_error?(res)
            result=res
            puts res.message
            exit -1
        else

            if options[:filter_flag]
                objs=@templatepool.select{|element|
                    element['USERNAME']==options[:filter_flag]  }
            else
                objs=@templatepool
            end

            result=[true, ""]
            header_template_small

            if options
                puts @table.data_str(objs, options)
            else
                puts @table.data_str(objs)
            end

            result
        end
    end
end


##########################
## COMMAND LINE PARSING ##
##########################

class OneTemplateParse < CommandParse

    COMMANDS_HELP=<<-EOT

Description:

This command enables the user to manage templates.


Commands:

* create (Registers a Template from a template file)
    onetemplate create <file>

    file is a file name where the Template description is located

* instantiate (Creates a VM instance from a Template)
    onetemplate instantiate <template_id>

* update (Lets the user edit and replace the Template contents)
    onetemplate update <template_id>

* publish (Publish a Template)
    onetemplate publish <template_id>

* unpublish (Unpublish an Template)
    onetemplate unpublish <template_id>

* chown (Changes the Template owner and group)
    onetemplate chown <template_id> <owner_id> [<group_id>]

* chgrp (Changes the Template group)
    onetemplate chgrp <template_id> <group_id>

* list (Shows Templates in the pool)
    onetemplate list <filter_flag>

    where filter_flag can be
        a, all   --> all the known Templates
        m, mine  --> the Templates belonging to the user in ONE_AUTH
        g, group --> 'mine' plus the Templates belonging to the groups
                        the user is member of
        uid      --> Templates of the user identified by this uid
        user     --> Templates of the user identified by the username

* top (Lists Templates continuously)
    onetemplate top

* show (Gets information about an specific Template)
    onetemplate show <template_id>

* delete (Deletes a Template)
    onetemplate delete <template_id>

EOT

    def text_commands
        COMMANDS_HELP
    end

    def text_command_name
        "onetemplate"
    end

    def list_options
        table=ShowTable.new(ShowTableTemplate)
        table.print_help
    end
end


def get_user_flags
    ops=Hash.new
    if ARGV[0]
        case ARGV[0]
            when "a", "all"
                ops[:filter_user]="-2"
            when "m", "mine"
                ops[:filter_user]="-3"
            when "g", "group"
                ops[:filter_user]="-1"
            else
                if !ARGV[0].match(/^[0123456789]+$/)
                    ops[:filter_user]="-2"
                    ops[:filter_flag]=ARGV[0]
                else
                    ops[:filter_user]=ARGV[0]
                end
        end
     else
        ops[:filter_user]="-2"
     end

     ops
end

def get_template(template_path)
    begin
        template = File.read(ARGV[0])
    rescue
        result = OpenNebula::Error.new("Can not read template: #{ARGV[0]}")
    end

    if !is_successful?(result)
        puts result.message
        exit -1
    end

    return template
end

onetemplate_opts=OneTemplateParse.new
onetemplate_opts.parse(ARGV)
ops=onetemplate_opts.options

result=[false, "Unknown error"]

command=ARGV.shift

case command
when "create", "register", "add"
    check_parameters("create", 1)
    template_contents = get_template(ARGV[0])

    template = OpenNebula::Template.new(OpenNebula::Template.build_xml, get_one_client)

    result=template.allocate(template_contents)
    if !OpenNebula.is_error?(result)
        puts "ID: " + template.id.to_s if ops[:verbose]
        exit 0
    end

when "instantiate"
    check_parameters("instantiate", 1)
    template_id = get_template_id(ARGV[0])

    template = OpenNebula::Template.new_with_id(template_id, get_one_client)

    result = template.instantiate
    if is_successful?(result)
        puts "Template instantiated." if ops[:verbose]
    end

when "update"
    puts "TODO"

when "publish"
    check_parameters("publish", 1)
    template_id = get_template_id(ARGV[0])

    template = OpenNebula::Template.new_with_id(template_id, get_one_client)

    result = template.publish
    if is_successful?(result)
        puts "Template published" if ops[:verbose]
    end

when "unpublish"
    check_parameters("unpublish", 1)
    template_id = get_template_id(ARGV[0])

    template = OpenNebula::Template.new_with_id(template_id, get_one_client)

    result = template.unpublish
    if is_successful?(result)
        puts "Template unpublished" if ops[:verbose]
    end

when "chown"
    check_parameters("chown", 2)

    obj_id = get_template_id(ARGV[0])
    new_uid  = ARGV[1].to_i
    new_gid = ( ARGV.length > 2 ) ? ARGV[2].to_i : -1

    obj = OpenNebula::Template.new_with_id(obj_id, get_one_client)

    result = obj.chown( new_uid, new_gid )
    if is_successful?(result)
        puts "Template user/group changed" if ops[:verbose]
    end

when "chgrp"
    check_parameters("chgrp", 2)

    obj_id = get_template_id(ARGV[0])
    new_uid  = -1
    new_gid  = ARGV[1].to_i

    obj = OpenNebula::Template.new_with_id(obj_id, get_one_client)

    result = obj.chown( new_uid, new_gid )
    if is_successful?(result)
        puts "Template group changed" if ops[:verbose]
    end

when "list"
    ops.merge!(get_user_flags)
    if !ops[:xml]
        templatelist = TemplateShow.new(get_one_client, ops[:filter_user].to_i)
        ops[:columns] = ops[:list] if ops[:list]
        result = templatelist.list_short(ops)
    else
        templatepool = OpenNebula::TemplatePool.new(get_one_client,
            ops[:filter_user].to_i)
        templatepool.info
        puts templatepool.to_xml
    end

when "top"
    ops.merge!(get_user_flags)
    templatelist = TemplateShow.new(get_one_client, ops[:filter_user].to_i)
    ops[:columns] = ops[:list] if ops[:list]
    result = templatelist.top(ops)

when "show"
    check_parameters("get_info", 1)
    args = expand_args(ARGV)

    args.each do |param|
        template_id = get_template_id(param)

        template = OpenNebula::Template.new_with_id(template_id, get_one_client)
        result = template.info

        if is_successful?(result)
            if !ops[:xml]
                str="%-15s: %-20s"
                str_h1="%-80s"

                print_header(str_h1, "TEMPLATE #{template[:id]} INFORMATION", true)

                puts str % ["ID", template.id.to_s]
                puts str % ["NAME", template.name]

                value = template['REGTIME'].to_i
                if value==0
                    value='-'
                else
                    value=Time.at(value).strftime("%m/%d %H:%M:%S")
                end
                puts str % ["REGISTER TIME", value]
                if template['PUBLIC'].to_i == 1
                    public_str = "Yes"
                else
                    public_str = "No"
                end
                puts str % ["PUBLIC", public_str]

                puts

                print_header(str_h1,"TEMPLATE CONTENTS",false)

                puts template.template_str
            else
                puts template.to_xml
            end
        end
     end

when "delete"
    check_parameters("delete", 1)
    args = expand_args(ARGV)

    args.each do |param|
        template_id = get_template_id(param)
        template = OpenNebula::Template.new(
                        OpenNebula::Template.build_xml(template_id),
                        get_one_client)

        result = template.delete
        if is_successful?(result)
            puts "Template correctly deleted"  if ops[:verbose]
        end
    end

else
    onetemplate_opts.print_help
    exit -1
end

if OpenNebula.is_error?(result)
    puts "Error: " + result.message
    exit -1
end


